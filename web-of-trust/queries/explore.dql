# Dgraph queries for exploring Web of Trust data in Ratel

# 1. Get all pubkeys with their follow counts
{
  all_users(func: has(pubkey)) {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    follows_count: count(follows)
    followers_count: count(~follows)
  }
}

# 2. Get a specific user with their follows (replace the pubkey value)
{
  user(func: eq(pubkey, "d91191e30e00444b942c0e82cad470b32af171764c2275bee0bd99377efd4075")) {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    follows_count: count(follows)
    follows {
      uid
      pubkey
      kind3CreatedAt
    }
    followers_count: count(~follows)
    followers: ~follows {
      uid
      pubkey
      kind3CreatedAt
    }
  }
}

# 3. Get top users by follower count
{
  popular_users(func: has(pubkey)) @cascade {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    follower_count: count(~follows)
    ~follows
  }
}

# 4. Get users who follow each other (mutual follows)
{
  mutual_follows(func: has(pubkey)) @cascade {
    uid
    pubkey
    follows @filter(has(pubkey)) {
      uid
      pubkey
      follows_back: ~follows @filter(uid(uid)) {
        uid
        pubkey
      }
    }
  }
}

# 5. Get follow graph with depth (2 hops from a specific user)
{
  follow_graph(func: eq(pubkey, "d91191e30e00444b942c0e82cad470b32af171764c2275bee0bd99377efd4075")) @recurse(depth: 2) {
    uid
    pubkey
    kind3CreatedAt
    follows
  }
}

# 6. Count total nodes and edges
{
  stats() {
    total_users: count(func: has(pubkey))
  }
  
  all_with_follows(func: has(follows)) {
    total_follow_edges: count(follows)
  }
}

# 7. Find users with no followers (leaf nodes)
{
  no_followers(func: has(pubkey)) @filter(NOT has(~follows)) {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    follows_count: count(follows)
  }
}

# 8. Find users who don't follow anyone
{
  no_follows(func: has(pubkey)) @filter(NOT has(follows)) {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    followers_count: count(~follows)
  }
}

# 9. Get recently updated users
{
  recent_updates(func: has(pubkey), orderdesc: last_db_update, first: 10) {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    follows_count: count(follows)
    followers_count: count(~follows)
  }
}

# 10. Visualize follow relationships (good for graph view in Ratel)
{
  graph_view(func: has(pubkey)) {
    uid
    pubkey
    follows {
      uid
      pubkey
      follows {
        uid
        pubkey
      }
    }
  }
}

# 11. Debug duplicate nodes - find all nodes for a pubkey
{
  check_duplicates(func: eq(pubkey, "d91191e30e00444b942c0e82cad470b32af171764c2275bee0bd99377efd4075")) {
    uid
    pubkey
    kind3CreatedAt
    last_db_update
    follows_count: count(follows)
    all_follows: follows {
      uid
      pubkey
    }
  }
}

# 12. Clean up duplicates - merge follows from duplicate nodes
# First, identify which UID has the most recent update
# Then manually merge or delete duplicates
